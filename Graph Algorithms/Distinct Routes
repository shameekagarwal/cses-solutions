#include<bits/stdc++.h>
using namespace std;
#define ll long long
 
int from[2050];
int to[2050];
vector<int>adj[550];
int cap[2050];
int flow[2050];
vector<int>level;
vector<int>ptr;
int n;
bool used[2050];
 
bool bfs()
{
    level = vector<int>(n, -1);
    queue<int>Q;
    Q.push(0);
    level[0] = 0;
    while (!Q.empty())
    {
        int x = Q.front();
        Q.pop();
        for (auto it : adj[x])
        {
            if ((level[to[it]] == -1) && (cap[it] - flow[it] >= 1))
            {
                level[to[it]] = level[x] + 1;
                Q.push(to[it]);
            }
        }
    }
    return (level[n - 1] != -1);
}
 
int dfs(int x, int c)
{
    if (x == n - 1)
        return c;
    for (int &i = ptr[x], it = adj[x][i]; i < adj[x].size(); i++, it = adj[x][i])
    {
        if ((level[to[it]] == level[x] + 1) && (cap[it] - flow[it] >= 1))
        {
            int cur = dfs(to[it], min(c, cap[it] - flow[it]));
            if (cur)
            {
                flow[it] += cur;
                flow[it ^ 1] -= cur;
                return cur;
            }
        }
    }
    return 0;
}
 
bool dfs2(int x, vector<int>&cur)
{
    if (x == n - 1)
    {
        cur.push_back(x);
        cout << cur.size() << "\n";
        for (auto it : cur)
            cout << it + 1 << " ";
        cout << "\n";
        return 1;
    }
    for (auto it : adj[x])
    {
        if ((flow[it] == cap[it]) && (it % 2 == 0) && (!used[it]))
        {
            cur.push_back(x);
            used[it] = 1;
            if (dfs2(to[it], cur))
                return 1;
            cur.pop_back();
        }
    }
}
 
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
 
    int m; cin >> n >> m;
    for (int i = 0; i < m; ++i)
    {
        int a, b; cin >> a >> b; a--; b--;
        adj[a].push_back(2 * i);
        adj[b].push_back(2 * i + 1);
        cap[2 * i] = 1;
        to[2 * i + 1] = from[2 * i] = a;
        to[2 * i] = from[2 * i + 1] = b;
    }
 
    int flow = 0;
    while (bfs())
    {
        ptr = vector<int>(n, 0);
        int curflow = dfs(0, 1e9);
        while (curflow)
        {
            flow += curflow;
            curflow = dfs(0, 1e9);
        }
    }
    cout << flow << "\n";
    for (int i = 0; i < flow; ++i)
    {
        vector<int>cur;
        dfs2(0, cur);
    }
 
    return 0;
}