#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define sz 100100
vector<pair<int, int>>adj[sz];
bool used[2 * sz];
int in[sz];
int out[sz];
vector<int>ans;
void F(int x)
{
    while (adj[x].size())
    {
        auto it = adj[x].back();
        adj[x].pop_back();
        if (!used[it.second])
        {
            used[it.second] = 1;
            F(it.first);
        }
    }
    ans.push_back(x);
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int n, m; cin >> n >> m;
    for (int i = 0; i < m; ++i)
    {
        int a, b; cin >> a >> b;
        adj[a].push_back({b, i});
        in[b]++; out[a]++;
    }
    int start = 0;
    int end = 0;
    for (int i = 1; i <= n; i++)
    {
        if (abs(in[i] - out[i]) > 1)
        {
            cout << "IMPOSSIBLE";
            return 0;
        }
        start += (out[i] - in[i] == 1);
        end += (in[i] - out[i] == 1);
    }
    if (start > 1 || end > 1)
    {
        cout << "IMPOSSIBLE";
        return 0;
    }
    int startvt = -1;
    for (int i = 1; i <= n; i++)
    {
        if (out[i] - in[i] == 1)
            startvt = i;
    }
    if (startvt != -1 && startvt != 1)
    {
        cout << "IMPOSSIBLE";
        return 0;
    }
    if (out[1] - in[1] == -1)
    {
        cout << "IMPOSSIBLE";
        return 0;
    }
    F(1);
    int k = ans.size();
    if (k != m + 1)
    {
        cout << "IMPOSSIBLE";
        return 0;
    }
    reverse(ans.begin(), ans.end());
    if (ans[k - 1] != n)
    {
        cout << "IMPOSSIBLE";
        return 0;
    }
    for (auto it : ans)
        cout << it << " ";
    return 0;
}