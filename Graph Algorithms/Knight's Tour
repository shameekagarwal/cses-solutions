#include<bits/stdc++.h>
using namespace std;
 
vector<pair<int, int>>moves;
int ans[9][9];
 
bool valid(int x, int y)
{
    bool ok = 1;
    ok &= (x > 0);
    ok &= (y > 0);
    ok &= (x < 9);
    ok &= (y < 9);
    return ok;
}
 
int from(int x, int y)
{
    int poss = 0;
    for (auto it : moves)
    {
        int xx = x + it.first;
        int yy = y + it.second;
        if (valid(xx, yy) && ans[xx][yy] == -1)
            poss++;
    }
    return poss;
}
 
bool dfs(int x, int y, int idx)
{
    ans[x][y] = idx;
    if (idx == 64)
        return 1;
    // Warnsdorff's rule
    vector<vector<int>>move_to;
    for (auto it : moves)
    {
        int xx = x + it.first;
        int yy = y + it.second;
        if (valid(xx, yy) && ans[xx][yy] == -1)
            move_to.push_back({from(xx, yy), xx, yy});
    }
    sort(move_to.begin(), move_to.end());
    for (auto it : move_to)
    {
        if (dfs(it[1], it[2], idx + 1))
            return 1;
    }
    ans[x][y] = -1;
    return 0;
}
 
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
 
    moves.push_back({1, 2});
    moves.push_back({1, -2});
    moves.push_back({ -1, 2});
    moves.push_back({ -1, -2});
    moves.push_back({2, 1});
    moves.push_back({2, -1});
    moves.push_back({ -2, 1});
    moves.push_back({ -2, -1});
 
    int x, y; cin >> x >> y;
    memset(ans, -1, sizeof(ans));
    dfs(y, x, 1);
    for (int i = 1; i <= 8; ++i)
    {
        for (int j = 1; j <= 8; j++)
            cout << ans[i][j] << " ";
        cout << "\n";
    }
 
    return 0;
}