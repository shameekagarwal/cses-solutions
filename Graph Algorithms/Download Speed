#include<bits/stdc++.h>
using namespace std;
#define ll long long
struct edge
{
    int u, v; ll cap, flow;
};
vector<edge>edges;
vector<vector<int>>adj;
vector<int>level;
vector<int>ptr;
int n;
bool bfs()
{
    queue<int>q;
    q.push(0);
    level[0] = 0;
    while (!q.empty())
    {
        int x = q.front();
        q.pop();
        for (auto it : adj[x])
        {
            if (edges[it].cap - edges[it].flow >= 1 && level[edges[it].v] == -1)
            {
                level[edges[it].v] = level[x] + 1;
                q.push(edges[it].v);
            }
        }
    }
    return (level[n - 1] != -1);
}
ll dfs(int x, ll c)
{
    if (x == n - 1)
        return c;
    for (int &i = ptr[x], it = adj[x][i]; i < adj[x].size(); i++, it = adj[x][i])
    {
        if ((level[edges[it].v] == level[x] + 1) && (edges[it].cap - edges[it].flow >= 1))
        {
            ll t = dfs(edges[it].v, min(c, edges[it].cap - edges[it].flow));
            if (t)
            {
                edges[it].flow += t;
                edges[it ^ 1].flow -= t;
                return t;
            }
        }
    }
    return 0;
}
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    int m; cin >> n >> m;
    adj.resize(n);
    for (int i = 0; i < m; ++i)
    {
        int a, b; ll c; cin >> a >> b >> c;
        a--; b--;
        edges.push_back({a, b, c, 0});
        adj[a].push_back(2 * i);
        edges.push_back({b, a, 0, 0});
        adj[b].push_back(2 * i + 1);
    }
    level = vector<int>(n, -1);
    ll ans = 0;
    while (bfs())
    {
        ptr = vector<int>(n, 0);
        ll curflow = dfs(0, 1e11);
        while (curflow)
        {
            ans += curflow;
            curflow = dfs(0, 1e11);
        }
        level = vector<int>(n, -1);
    }
    cout << ans;
    return 0;
}
