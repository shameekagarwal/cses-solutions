#include<bits/stdc++.h>
using namespace std;
#define sz 200100
#define ll long long
 
vector<int>adj[sz];
vector<int>adjR[sz];
bool vis[sz];
stack<int>st;
int color[sz];
 
void dfs(int x)
{
	vis[x] = 1;
	for (auto it : adj[x])
	{
		if (!vis[it])
			dfs(it);
	}
	st.push(x);
}
 
void dfs2(int x, int c)
{
	color[x] = c;
	for (auto it : adjR[x])
	{
		if (!color[it])
			dfs2(it, c);
	}
}
 
int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
 
	int n, m; cin >> n >> m;
 
	for (int i = 0; i < n; ++i)
	{
		char a, b; int x, y;
		cin >> a >> x >> b >> y;
		x--; y--;
		x *= 2; y *= 2;
		if (a == '-')
			x++;
		if (b == '-')
			y++;
		// if one is false, the other should be true
		adj[x ^ 1].push_back(y);
		adj[y ^ 1].push_back(x);
		adjR[y].push_back(x ^ 1);
		adjR[x].push_back(y ^ 1);
	}
 
	for (int i = 0; i < 2 * m; ++i)
	{
		if (!vis[i])
			dfs(i);
	}
 
	int c = 1;
	while (!st.empty())
	{
		int x = st.top();
		st.pop();
		if (!color[x])
		{
			dfs2(x, c);
			c++;
		}
	}
 
	for (int i = 0; i < 2 * m; i += 2)
	{
		if (color[i] == color[i + 1])
		{
			cout << "IMPOSSIBLE";
			return 0;
		}
	}
 
	for (int i = 0; i < 2 * m; i += 2)
	{
		// i + 1 maybe reachable from i
		// if color[i] < color[i + 1]
		// so i + 1 favourable
		cout << (color[i] < color[i + 1] ? "- " : "+ ");
	}
 
	return 0;
}