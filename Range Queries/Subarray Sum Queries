#include<bits/stdc++.h>
using namespace std;
#define sz 200100
#define MOD 1000000007
#define ll long long
struct node
{
	ll sm, mx, pre, suf;
};
node tr[4 * sz];
ll ar[sz];
void make(node &a, node &b, node &c)
{
	a.mx = max(b.suf + c.pre, max(b.mx, c.mx));
	a.sm = b.sm + c.sm;
	a.pre = max(b.pre, b.sm + c.pre);
	a.suf = max(c.suf, b.suf + c.sm);
}
void build(int s, int e, int idx)
{
	if (s == e)
	{
		tr[idx] = {ar[s], ar[s], ar[s], ar[s]};
		return;
	}
	int m = (s + e) / 2;
	build(s, m, 2 * idx);
	build(m + 1, e, 2 * idx + 1);
	make(tr[idx], tr[2 * idx], tr[2 * idx + 1]);
}
node que(int s, int e, int qs, int qe, int idx)
{
	if (qs > e || qe < s || qe < qs)
	{
		node waste = {0, (ll) - 1e15, (ll) - 1e15, (ll) - 1e15};
		return waste;
	}
	if (qs <= s && qe >= e)
		return tr[idx];
	int m = (s + e) / 2;
	node a = que(s, m, qs, qe, 2 * idx);
	node b = que(m + 1, e, qs, qe, 2 * idx + 1);
	node ans;
	make(ans, a, b);
	return ans;
}
void upd(int s, int e, int i, ll v, int idx)
{
	if (i < s || i > e)
		return;
	if (s == e)
	{
		tr[idx] = {v, v, v, v};
		return;
	}
	int m = (s + e) / 2;
	upd(s, m, i, v, 2 * idx);
	upd(m + 1, e, i, v, 2 * idx + 1);
	make(tr[idx], tr[2 * idx], tr[2 * idx + 1]);
}
int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	int n, q; cin >> n >> q;
	for (int i = 0; i < n; ++i)
		cin >> ar[i];
	build(0, n - 1, 1);
	while (q--)
	{
		int L, R; cin >> L >> R;
		upd(0, n - 1, L - 1, R, 1);
		cout << max(tr[1].mx, 0ll) << "\n";
	}
	return 0;
}