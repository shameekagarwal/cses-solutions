#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define sz 200100
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;
 
int a[sz];
vector<int>adj[sz];
int tin[sz];
int tout[sz];
int revtout[2 * sz];
int tim;
int ans[sz];
void dfs(int s, int p)
{
	tin[s] = tim++;
	for (auto it : adj[s])
	{
		if (it != p)
			dfs(it, s);
	}
	tout[s] = tim++;
	revtout[tout[s]] = s;
}
int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	int n, x, y; cin >> n;
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	for (int i = 0; i < n - 1; i++)
	{
		cin >> x >> y;
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	dfs(1, 0);
	unordered_map<int, int>vis;
	pbds s;
	for (int i = 0; i < 2 * n; i++)
	{
		if (revtout[i])
		{
			int nd = revtout[i];
			if (vis.count(a[nd]))
				s.erase(vis[a[nd]]);
			s.insert(tout[nd]);
			vis[a[nd]] = tout[nd];
			ans[nd] = s.size() - s.order_of_key(tin[nd]);
		}
	}
	for (int i = 1; i <= n; i++)
		cout << ans[i] << " ";
	return 0;
}
